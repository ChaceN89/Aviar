.env file
  contains enviroment variables 
    like global variables
    could add to git repo but will change in future
      depending on ports and things
      ex use to store the long mongoDb connection string

npm init
  set up a node system and ability to run server
    assuming nodejs is intsalled

.gitignore
node_modules
.env
  want to git commits to ignore node_modules files  
  and the .env file
    and any other file you want to ignore in your personal directory that you
    son't want to commit to you git repo adn then github repo


setup dependencies

npm install express dotnev mongoose colors

    express
    minimal and flexible Node.js web application 
    framework that provides a robust set of features 
    for web and mobile applications.
    
    dotenv
    allows us to have enviroment variables
    npm install dotenv

    colors
    not needed just for utility purpose

    mongoose
    for connecting to the database


npm i -D nodemon
    so you don't have top restar the server afte every change
    except for large changes


in package.json
need to change"scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  to
  "scripts": {
    "start": "node backend/server.js"
    "server": "nodemon backend/server.js"
  },


other instals


npm instal jsonwebtoken   //instals the jwt for sending tokens 

npm instal bcryptjs  // for encryption
npm instal bcrypt  // aciddentally installed but shouldn't do anything


npm instal express-async-handler  // not sure but important for the controller


npm run server
  runs the server 


----------------
git

for personal use locally
  git init  
    sets up git assuming its downloaded

  git add .  add all to staging

  git commit -m 'comment about the commit'

 

but other than that you will clone the repoitory 
https://github.com/kar2fast/Aviar.git

and use it to work on
you will need to instal the modules and make your own .env file




===========================================================================================

other information about Linux vs windows withte json package files 
---------------------------------------------------------------
  on windows you get this warning about line endings
    warning: LF will be replaced by CRLF in package-lock.json.
    The file will have its original line endings in your working directory
    warning: LF will be replaced by CRLF in package.json.
    The file will have its original line endings in your working directory

    use unix to not have this problem 
    or use this help in case any problems arise
    https://stackoverflow.com/questions/5834014/lf-will-be-replaced-by-crlf-in-git-what-is-that-and-is-it-important
      Windows
      If you’re programming on Windows and working with people who are not (or vice-versa), 
      you’ll probably run into line-ending issues at some point. This is because Windows 
      uses both a carriage-return character and a linefeed character for newlines in its 
      files, whereas Mac and Linux systems use only the linefeed character. This is a subtle
      but incredibly annoying fact of cross-platform work; many editors on Windows silently 
      replace existing LF-style line endings with CRLF, or insert both line-ending characters 
      when the user hits the enter key.

      Git can handle this by auto-converting CRLF line endings into LF when you add a file to the index, 
      and vice versa when it checks out code onto your filesystem. You can turn on this functionality with
      the core.autocrlf setting. If you’re on a Windows machine, set it to true – this converts LF endings 
      into CRLF when you check out code:

      $ git config --global core.autocrlf true


      Linux or Mac
      If you’re on a Linux or Mac system that uses LF line endings, then you don’t want Git to automatically
      convert them when you check out files; however, if a file with CRLF endings accidentally gets introduced,
      then you may want Git to fix it. You can tell Git to convert CRLF to LF on commit but not the other way 
      around by setting core.autocrlf to input:

      $ git config --global core.autocrlf input
      

      This setup should leave you with CRLF endings in Windows checkouts, but LF endings on Mac and Linux 
      systems and in the repository.

      If you’re a Windows programmer doing a Windows-only project, then you can turn off this functionality, 
      recording the carriage returns in the repository by setting the config value to false:

      $ git config --global core.autocrlf false

===========================================================================================



